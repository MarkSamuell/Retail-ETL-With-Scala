[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\TONYTE~1\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\TONYTE~1\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.10.0 (Oracle Corporation Java 22.0.1)
[debug] Load.defaultLoad until apply took 194.8139ms
[debug]           Load.loadUnit: plugins took 203.5561ms
[debug]           Load.loadUnit: defsScala took 0.5902ms
[debug] [Loading] Scanning directory C:\Users\Tony Tech\IdeaProjects\ScalaProject\project
[debug]             Load.loadUnit: mkEval took 15.2133ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Tony Tech\IdeaProjects\ScalaProject\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 26.1753 ms
[info] loading settings for project scalaproject-build from idea.sbt ...
[debug]               Load.resolveProject(scalaproject-build) took 68.253ms
[debug]             Load.loadTransitive: finalizeProject(Project(id scalaproject-build, base: C:\Users\Tony Tech\IdeaProjects\ScalaProject\project, plugins: List(<none>))) took 106.2366ms
[debug] [Loading] Done in C:\Users\Tony Tech\IdeaProjects\ScalaProject\project, returning: (scalaproject-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 6783.3618ms
[debug]           Load.loadUnit: cleanEvalClasses took 14.4992ms
[debug]         Load.loadUnit(file:/C:/Users/Tony%20Tech/IdeaProjects/ScalaProject/project/, ...) took 7014.1888ms
[debug]       Load.apply: load took 7563.2268ms
[debug]       Load.apply: resolveProjects took 11.1087ms
[debug]       Load.apply: finalTransforms took 144.4025ms
[debug]       Load.apply: config.delegates took 15.9547ms
[debug]       Load.apply: Def.make(settings)... took 903.5841ms
[debug]       Load.apply: structureIndex took 186.8519ms
[debug]       Load.apply: mkStreams took 2.3933ms
[info] loading project definition from C:\Users\Tony Tech\IdeaProjects\ScalaProject\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 13788.4728ms
[debug]     Load.loadUnit: defsScala took 0.0047ms
[debug] [Loading] Scanning directory C:\Users\Tony Tech\IdeaProjects\ScalaProject
[debug]       Load.loadUnit: mkEval took 0.3682ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 6.6927 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 64.3398ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\Users\Tony Tech\IdeaProjects\ScalaProject, plugins: List(<none>))) took 74.1782ms
[debug] [Loading] Done in C:\Users\Tony Tech\IdeaProjects\ScalaProject, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 2349.2181ms
[debug]     Load.loadUnit: cleanEvalClasses took 35.3187ms
[debug]   Load.loadUnit(file:/C:/Users/Tony%20Tech/IdeaProjects/ScalaProject/, ...) took 16175.8337ms
[debug] Load.apply: load took 16216.2849ms
[debug] Load.apply: resolveProjects took 0.3356ms
[debug] Load.apply: finalTransforms took 61.7569ms
[debug] Load.apply: config.delegates took 0.8488ms
[debug] Load.apply: Def.make(settings)... took 161.6572ms
[debug] Load.apply: structureIndex took 59.1763ms
[debug] Load.apply: mkStreams took 0.0032ms
[info] set current project to ScalaProject (in build file:/C:/Users/Tony%20Tech/IdeaProjects/ScalaProject/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 50828 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 50828, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to ScalaProject (in build file:/C:/Users/Tony%20Tech/IdeaProjects/ScalaProject/)
[debug] > Exec(idea-shell, None, None)
